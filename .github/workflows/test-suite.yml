name: test-suite

on:
  push:
    branches:
      - stable
      - staging
      - trying
      - 'pr/*'
  pull_request:
  merge_group:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  # Deny warnings in CI
  # Disable debug info (see https://github.com/sigp/lighthouse/issues/4005)
  RUSTFLAGS: "-D warnings -C debuginfo=0"
  # The Nightly version used for cargo-udeps, might need updating from time to time.
  PINNED_NIGHTLY: nightly-2023-04-16
  # Prevent Github API rate limiting.
  LIGHTHOUSE_GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  # Enable self-hosted runners for the sigp repo only.
  SELF_HOSTED_RUNNERS: ${{ github.repository == 'sigp/lighthouse' }}
  # Self-hosted runners need to reference a different host for `./watch` tests.
  WATCH_HOST: ${{ github.repository == 'sigp/lighthouse' && 'host.docker.internal' || 'localhost' }}
jobs:
  release-build:
    name: release-build
    runs-on: ${{ github.repository == 'sigp/lighthouse' && fromJson('["self-hosted", "linux", "large"]') || 'ubuntu-latest'  }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      - name: Build and create artifacts
        run: cargo build --release
      - name: Archive artifacts
        run: tar -czvf artifacts.tar.gz -C target/release .
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: release-artifacts
          path: artifacts.tar.gz
  release-tests-ubuntu:
    name: release-tests-ubuntu
    # Use self-hosted runners only on the sigp repo.
    runs-on: ${{ github.repository == 'sigp/lighthouse' && fromJson('["self-hosted", "linux", "large"]') || 'ubuntu-latest'  }}
    needs: release-build
    steps:
    - uses: actions/checkout@v3
    - name: Download artifacts
      uses: actions/download-artifact@v3
      with:
        name: release-artifacts
        path: .
    - name: Extract artifacts
      run: |
        tar -xzvf artifacts.tar.gz
    - name: Install Foundry (anvil)
      uses: foundry-rs/foundry-toolchain@v1
      with:
        version: nightly-ca67d15f4abd46394b324c50e21e66f306a1162d
    - name: Run tests in release
      run: make test-release
  beacon-chain-tests:
    name: beacon-chain-tests
    # Use self-hosted runners only on the sigp repo.
    runs-on: ${{ github.repository == 'sigp/lighthouse' && fromJson('["self-hosted", "linux", "large"]') || 'ubuntu-latest'  }}
    needs: release-build
    steps:
    - uses: actions/checkout@v3
    - name: Download artifacts
      uses: actions/download-artifact@v3
      with:
        name: release-artifacts
        path: .
    - name: Extract artifacts
      run: |
        tar -xzvf artifacts.tar.gz
    - name: Run beacon_chain tests for all known forks
      run: make test-beacon-chain
  op-pool-tests:
    name: op-pool-tests
    runs-on: ubuntu-latest
    needs: release-build
    steps:
    - uses: actions/checkout@v3
    - name: Download artifacts
      uses: actions/download-artifact@v3
      with:
        name: release-artifacts
        path: .
    - name: Extract artifacts
      run: |
        tar -xzvf artifacts.tar.gz
    - name: Run operation_pool tests for all known forks
      run: make test-op-pool
  slasher-tests:
    name: slasher-tests
    runs-on: ubuntu-latest
    needs: release-build
    steps:
    - uses: actions/checkout@v3
    - name: Download artifacts
      uses: actions/download-artifact@v3
      with:
        name: release-artifacts
        path: .
    - name: Extract artifacts
      run: |
        tar -xzvf artifacts.tar.gz
    - name: Run slasher tests for all supported backends
      run: make test-slasher
  state-transition-vectors-ubuntu:
    name: state-transition-vectors-ubuntu
    runs-on: ubuntu-latest
    needs: release-build
    steps:
    - uses: actions/checkout@v3
    - name: Download artifacts
      uses: actions/download-artifact@v3
      with:
        name: release-artifacts
        path: .
    - name: Extract artifacts
      run: |
        tar -xzvf artifacts.tar.gz
    - name: Run state_transition_vectors in release.
      run: make run-state-transition-tests
  ef-tests-ubuntu:
    name: ef-tests-ubuntu
    # Use self-hosted runners only on the sigp repo.
    runs-on: ${{ github.repository == 'sigp/lighthouse' && fromJson('["self-hosted", "linux", "small"]') || 'ubuntu-latest'  }}
    needs: release-build
    steps:
    - uses: actions/checkout@v3
    - name: Download artifacts
      uses: actions/download-artifact@v3
      with:
        name: release-artifacts
        path: .
    - name: Extract artifacts
      run: |
        tar -xzvf artifacts.tar.gz
    - name: Run consensus-spec-tests with blst, milagro and fake_crypto
      run: make test-ef
  eth1-simulator-ubuntu:
    name: eth1-simulator-ubuntu
    runs-on: ubuntu-latest
    needs: release-build
    steps:
    - uses: actions/checkout@v3
    - name: Download artifacts
      uses: actions/download-artifact@v3
      with:
        name: release-artifacts
        path: .
    - name: Extract artifacts
      run: |
        tar -xzvf artifacts.tar.gz
    - name: Install Foundry (anvil)
      uses: foundry-rs/foundry-toolchain@v1
      with:
        version: nightly-ca67d15f4abd46394b324c50e21e66f306a1162d
    - name: Run the beacon chain sim that starts from an eth1 contract
      run: cargo run --release --bin simulator eth1-sim
  merge-transition-ubuntu:
    name: merge-transition-ubuntu
    runs-on: ubuntu-latest
    needs: release-build
    steps:
    - uses: actions/checkout@v3
    - name: Download artifacts
      uses: actions/download-artifact@v3
      with:
        name: release-artifacts
        path: .
    - name: Extract artifacts
      run: |
        tar -xzvf artifacts.tar.gz
    - name: Install Foundry (anvil)
      uses: foundry-rs/foundry-toolchain@v1
      with:
        version: nightly-ca67d15f4abd46394b324c50e21e66f306a1162d
    - name: Run the beacon chain sim and go through the merge transition
      run: cargo run --release --bin simulator eth1-sim --post-merge
  no-eth1-simulator-ubuntu:
    name: no-eth1-simulator-ubuntu
    runs-on: ubuntu-latest
    needs: release-build
    steps:
    - uses: actions/checkout@v3
    - name: Download artifacts
      uses: actions/download-artifact@v3
      with:
        name: release-artifacts
        path: .
    - name: Extract artifacts
      run: |
        tar -xzvf artifacts.tar.gz
    - name: Run the beacon chain sim without an eth1 connection
      run: cargo run --release --bin simulator no-eth1-sim
  syncing-simulator-ubuntu:
    name: syncing-simulator-ubuntu
    runs-on: ubuntu-latest
    needs: release-build
    steps:
    - uses: actions/checkout@v3
    - name: Download artifacts
      uses: actions/download-artifact@v3
      with:
        name: release-artifacts
        path: .
    - name: Extract artifacts
      run: |
        tar -xzvf artifacts.tar.gz
    - name: Install Foundry (anvil)
      uses: foundry-rs/foundry-toolchain@v1
      with:
        version: nightly-ca67d15f4abd46394b324c50e21e66f306a1162d
    - name: Run the syncing simulator
      run: cargo run --release --bin simulator syncing-sim
  execution-engine-integration-ubuntu:
    name: execution-engine-integration-ubuntu
    runs-on: ubuntu-latest
    needs: release-build
    steps:
    - uses: actions/checkout@v3
    - uses: actions/setup-go@v3
      with:
        go-version: '1.20'
    - uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '6.0.201'
    - name: Download artifacts
      uses: actions/download-artifact@v3
      with:
        name: release-artifacts
        path: .
    - name: Extract artifacts
      run: |
        tar -xzvf artifacts.tar.gz
    - name: Run exec engine integration tests in release
      run: make test-exec-engine
  cargo-udeps:
    name: cargo-udeps
    runs-on: ubuntu-latest
    needs: release-build
    steps:
    - uses: actions/checkout@v3
    - name: Install Rust (${{ env.PINNED_NIGHTLY }})
      run: rustup toolchain install $PINNED_NIGHTLY
    # FIXME replace cargo install
    - name: Install cargo-udeps
      run: cargo install cargo-udeps --locked --force
    - name: Create Cargo config dir
      run: mkdir -p .cargo
    - name: Install custom Cargo config
      run: cp -f .github/custom/config.toml .cargo/config.toml
    - name: Run cargo udeps to identify unused crates in the dependency graph
      run: make udeps
    env:
      # Allow warnings on Nightly
      RUSTFLAGS: ""
