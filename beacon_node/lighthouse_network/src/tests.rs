use bytes::BytesMut;
use gossipsub::ValidationMode;

#[cfg(test)]
mod test {
    use crate::rpc::codec::{SSZSnappyInboundCodec, SSZSnappyOutboundCodec};
    use crate::rpc::SupportedProtocol;
    use asynchronous_codec::Decoder;
    use bytes::BytesMut;
    use eth2_network_config::Eth2NetworkConfig;
    use gossipsub::{GossipHandlerEvent, GossipsubCodec, ValidationMode};
    use std::sync::Arc;
    use tokio_util::codec::Decoder as OtherDecoder;
    use types::{EthSpec, ForkContext, MainnetEthSpec};

    static GOSSIP_PACKET: [u8; 243] = [
        0x45, 0x00, 0x00, 0xf3, 0xcf, 0x51, 0x40, 0x00, 0x40, 0x06, 0x12, 0x68, 0xac, 0x10, 0x00,
        0x13, 0xac, 0x10, 0x00, 0x18, 0x23, 0x28, 0x32, 0xc8, 0x98, 0x64, 0xcd, 0x63, 0x2f, 0x46,
        0x8a, 0xb0, 0x80, 0x18, 0x26, 0x6c, 0x59, 0x31, 0x00, 0x00, 0x01, 0x01, 0x08, 0x0a, 0x6c,
        0xaf, 0x10, 0xa5, 0x91, 0xe2, 0xcc, 0x50, 0x00, 0xbd, 0x49, 0xa2, 0x48, 0x62, 0x7b, 0xb1,
        0x10, 0xf8, 0xab, 0xb7, 0xde, 0x0a, 0xe1, 0x43, 0xfc, 0xfc, 0xcb, 0x68, 0xca, 0x4b, 0x65,
        0x53, 0xe4, 0x7c, 0xbc, 0xd7, 0x99, 0x53, 0xd5, 0x7e, 0xcf, 0xa5, 0xb7, 0x48, 0x7d, 0x84,
        0x7b, 0xc4, 0xb5, 0x5d, 0xf4, 0x36, 0x49, 0x31, 0x27, 0x06, 0xfd, 0xbc, 0x56, 0x1a, 0xfc,
        0x4c, 0x70, 0x42, 0x23, 0x10, 0xbd, 0x43, 0xd9, 0xdd, 0x38, 0x51, 0xbe, 0xeb, 0xdc, 0xc8,
        0x6e, 0xda, 0x6c, 0xc8, 0x7c, 0x27, 0x0c, 0xb3, 0x5a, 0x95, 0xa6, 0xcb, 0xe1, 0xca, 0x89,
        0xc3, 0x68, 0xde, 0x56, 0x02, 0x7e, 0x1d, 0x96, 0xfa, 0xab, 0x5f, 0x7b, 0xce, 0xc0, 0xec,
        0xa4, 0x52, 0xab, 0x65, 0x3c, 0xcc, 0x51, 0xd2, 0xba, 0x67, 0x5e, 0x1d, 0xb0, 0xf8, 0xe2,
        0x9b, 0xf6, 0x2c, 0x5c, 0x17, 0x3a, 0x0c, 0xbf, 0xbc, 0x9f, 0x54, 0xdc, 0x06, 0xcf, 0x5c,
        0x68, 0x09, 0x83, 0x5e, 0xec, 0x11, 0x74, 0x35, 0x2e, 0x7c, 0xc7, 0xe1, 0x2b, 0xb6, 0x45,
        0x67, 0xf3, 0x49, 0x52, 0xd0, 0xdd, 0x30, 0x3a, 0xdd, 0x8b, 0x89, 0x9a, 0xd5, 0x0c, 0xb6,
        0x19, 0x64, 0x3f, 0x76, 0xb1, 0xd5, 0xcc, 0x42, 0x5f, 0x5f, 0x17, 0xc5, 0x09, 0x31, 0x35,
        0xf2, 0xf2, 0x05, 0xed, 0xe2, 0x8f, 0xce, 0x68, 0x34, 0xc0, 0x90, 0x74, 0xf6, 0x31, 0x7b,
        0x1f, 0xc0, 0xdd,
    ];

    static RPC_METADATA_REQ_PACKET: [u8; 574] = [
        0x45, 0x00, 0x02, 0x3e, 0xcf, 0x4e, 0x40, 0x00, 0x40, 0x06, 0x11, 0x20, 0xac, 0x10, 0x00,
        0x13, 0xac, 0x10, 0x00, 0x18, 0x23, 0x28, 0x32, 0xc8, 0x98, 0x64, 0xca, 0xd4, 0x2f, 0x46,
        0x8a, 0x92, 0x80, 0x18, 0x26, 0x6c, 0x5a, 0x7c, 0x00, 0x00, 0x01, 0x01, 0x08, 0x0a, 0x6c,
        0xaf, 0x0c, 0xbd, 0x91, 0xe2, 0xc8, 0x68, 0x02, 0x08, 0xbe, 0x35, 0x67, 0x4f, 0xff, 0x94,
        0xf4, 0x7f, 0xb8, 0xd2, 0x6d, 0x2a, 0xa1, 0xeb, 0x61, 0x98, 0x5d, 0xf1, 0x3a, 0x49, 0xb3,
        0x03, 0xd0, 0x2a, 0x1b, 0x8c, 0x90, 0x2a, 0x42, 0xbd, 0xbd, 0x3e, 0x8d, 0x2f, 0x7c, 0xfa,
        0xd9, 0xb7, 0x5e, 0x87, 0xa8, 0x96, 0x93, 0x96, 0x97, 0x9b, 0xd4, 0x9e, 0x8b, 0x01, 0x24,
        0x8d, 0xcd, 0x34, 0xa2, 0x2d, 0x54, 0xfe, 0xb3, 0xba, 0xdb, 0x56, 0xfe, 0x9a, 0x7b, 0xa0,
        0xfb, 0x8f, 0x7e, 0xfb, 0x94, 0x80, 0x48, 0xce, 0x67, 0x1d, 0xa4, 0x5c, 0x44, 0xb0, 0x10,
        0x1d, 0xad, 0x4d, 0x7d, 0xcd, 0xb0, 0xff, 0x7d, 0xdc, 0xba, 0x27, 0x9c, 0x25, 0xd4, 0x87,
        0x64, 0x6c, 0x33, 0x5c, 0x58, 0x2d, 0x89, 0xf8, 0xfe, 0xeb, 0x1c, 0x6d, 0xb5, 0x7b, 0xfd,
        0x46, 0x2c, 0xa6, 0x66, 0xd8, 0x3f, 0xac, 0x46, 0xa6, 0x3c, 0x74, 0x9d, 0xee, 0xc2, 0x16,
        0xe2, 0xbe, 0xdc, 0xd9, 0xcf, 0x28, 0x12, 0x70, 0x35, 0x59, 0x01, 0xf2, 0xc3, 0x89, 0x76,
        0x57, 0x4b, 0x0f, 0x85, 0xe3, 0xee, 0x6f, 0xb3, 0x75, 0xcb, 0xab, 0x70, 0x5f, 0x4b, 0xcc,
        0x81, 0x6a, 0xe9, 0xa1, 0xcb, 0x66, 0x74, 0xea, 0x2b, 0x6d, 0x6a, 0x0a, 0x2a, 0xe2, 0x60,
        0xc9, 0xe4, 0x9b, 0x95, 0x2d, 0x67, 0xa3, 0xa2, 0x92, 0x69, 0x3b, 0x4c, 0xd9, 0x7f, 0x14,
        0xee, 0xe1, 0x55, 0x91, 0x15, 0xf2, 0x81, 0xe5, 0x4f, 0xa8, 0x18, 0x13, 0x0b, 0x2d, 0x20,
        0xd4, 0x60, 0x31, 0x68, 0x65, 0x1c, 0xba, 0x01, 0xad, 0x9d, 0xc1, 0x4e, 0x0a, 0xcd, 0x5f,
        0x4a, 0x69, 0xf3, 0xc5, 0x12, 0x05, 0xf9, 0x4c, 0xbb, 0x02, 0x92, 0xe4, 0xd0, 0x02, 0x21,
        0x01, 0x86, 0x76, 0x35, 0xe1, 0x4d, 0xa1, 0xbd, 0x3b, 0xf3, 0x5f, 0x13, 0x10, 0xa6, 0x66,
        0x81, 0x61, 0xdd, 0x7a, 0x4b, 0x4a, 0x80, 0x4a, 0x15, 0x44, 0x4b, 0x6b, 0xd8, 0xab, 0xd7,
        0xe9, 0xda, 0xcf, 0x38, 0x6e, 0x3f, 0x59, 0xf4, 0xeb, 0xe1, 0xfe, 0x29, 0x0a, 0x97, 0xe2,
        0xb9, 0x6c, 0x71, 0x0e, 0xa1, 0x6e, 0x78, 0xa6, 0x39, 0xc9, 0x2d, 0x95, 0xe3, 0x1d, 0xcc,
        0xeb, 0xd4, 0x6e, 0x34, 0x0f, 0x3e, 0xa0, 0xac, 0x34, 0x81, 0x8e, 0x81, 0x21, 0xdc, 0x0d,
        0x3e, 0x7d, 0x23, 0x2c, 0xe4, 0xfd, 0xa1, 0xa9, 0x1c, 0x39, 0x73, 0xe4, 0x35, 0x37, 0xb0,
        0xed, 0xfc, 0xe0, 0x44, 0xa0, 0xec, 0x81, 0xc4, 0xb4, 0x0c, 0x4e, 0x97, 0xe2, 0xa4, 0xef,
        0xd8, 0x2d, 0x4e, 0x8c, 0xd0, 0xb6, 0x16, 0x85, 0xfc, 0xe4, 0xde, 0x1e, 0x0c, 0x5a, 0xaf,
        0x0c, 0x67, 0xab, 0x3a, 0xa0, 0xdb, 0xbe, 0x4c, 0xb9, 0x74, 0x5a, 0x42, 0x7f, 0x9a, 0xa4,
        0x0d, 0x96, 0x5f, 0x2f, 0xd9, 0x05, 0x05, 0x31, 0xce, 0xc1, 0xe5, 0x81, 0x6c, 0xf0, 0x29,
        0xcf, 0x85, 0xac, 0xb9, 0x88, 0x5d, 0xd6, 0x98, 0xac, 0x69, 0xc6, 0x9d, 0xcb, 0x11, 0xdd,
        0x78, 0xe4, 0xb1, 0xe7, 0x80, 0xc6, 0x66, 0x0c, 0x31, 0xaf, 0x1b, 0x46, 0xb1, 0xf3, 0x13,
        0x07, 0x45, 0xd0, 0x76, 0xd3, 0xbc, 0x7f, 0xb7, 0x2f, 0x70, 0x58, 0xd3, 0x83, 0xab, 0x66,
        0x26, 0x68, 0x75, 0xae, 0xa4, 0x19, 0xb1, 0xfb, 0x93, 0x7d, 0x89, 0x24, 0x71, 0x52, 0x40,
        0x78, 0x14, 0xc0, 0xa2, 0x4f, 0x07, 0x4c, 0x93, 0xf8, 0x90, 0xa0, 0xe0, 0x2a, 0x00, 0x38,
        0xfd, 0x39, 0x36, 0xd8, 0x6f, 0x8e, 0x55, 0xea, 0xc9, 0x61, 0x66, 0x09, 0x62, 0x53, 0x57,
        0x92, 0x1b, 0x18, 0xfd, 0x6e, 0xf7, 0x4b, 0x4d, 0x27, 0xd0, 0xf0, 0x5e, 0x4f, 0x79, 0x86,
        0xa4, 0xbf, 0x14, 0x3f, 0xad, 0xa2, 0x3a, 0xdc, 0x44, 0x02, 0x6d, 0x80, 0x46, 0xa9, 0x19,
        0x14, 0x9e, 0xdf, 0x66, 0xa3, 0xb4, 0x06, 0x56, 0x86, 0xa5, 0xcb, 0x90, 0xbf, 0x64, 0xb5,
        0x7a, 0x57, 0x01, 0xcf,
    ];

    type E = MainnetEthSpec;

    #[test]
    fn test_decode() {
        let spec = E::default_spec();
        let genesis_validators_root = Eth2NetworkConfig::constant("mainnet")
            .unwrap()
            .unwrap()
            .genesis_validators_root::<E>()
            .unwrap()
            .unwrap();
        let fork_context = Arc::new(ForkContext::new::<E>(
            spec.deneb_fork_epoch
                .unwrap()
                .start_slot(E::slots_per_epoch()),
            genesis_validators_root,
            &spec,
        ));

        // if let Some(payload) = extract_payload(&GOSSIP_PACKET) {
        if let Some(payload) = extract_payload(&RPC_METADATA_REQ_PACKET) {
            if decode_gossip_payload(payload).is_err() {
                if decode_rpc_request(payload, fork_context.clone()).is_err() {
                    decode_rpc_response(payload, fork_context.clone()).unwrap()
                }
            }
        } else {
            println!("No payload found in the packet.");
        }
    }

    fn extract_payload(packet: &[u8]) -> Option<&[u8]> {
        // The IP header starts after the Ethernet header (if present), assuming no Ethernet, start at 0.
        // Otherwise, skip the Ethernet header (14 bytes)
        let ip_header_start = 0;

        // The IP header length is in the first byte of the IP header. It specifies the length in 4-byte words.
        let ip_header_len = (packet[ip_header_start] & 0x0F) * 4; // IP header length in bytes

        // TCP header starts after the IP header.
        let tcp_header_start = ip_header_start + ip_header_len as usize;

        // The TCP header length is in the first byte of the TCP header. It is specified in 4-byte words.
        let tcp_header_len = ((packet[tcp_header_start + 12] >> 4) & 0xF) * 4; // TCP header length in bytes

        // The payload starts after the TCP header.
        let payload_start = tcp_header_start + tcp_header_len as usize;

        // Extract the payload
        if payload_start < packet.len() {
            Some(&packet[payload_start..])
        } else {
            None // In case there's no payload or the packet is too short
        }
    }

    fn decode_rpc_request(payload: &[u8], fork_context: Arc<ForkContext>) -> Result<(), String> {
        let protocol_ids = SupportedProtocol::currently_supported(&fork_context);
        let mut found = false;
        protocol_ids.iter().for_each(|p| {
            let mut codec =
                SSZSnappyOutboundCodec::<E>::new(p.clone(), 20000, fork_context.clone());
            let mut bytes = BytesMut::from(payload);
            use tokio_util::codec::Decoder;
            match codec.decode(&mut bytes) {
                Ok(r) => {
                    println!("Found protocol {:?} {:?}", p.versioned_protocol, r);
                    found = true;
                }
                Err(e) => {
                    println!("Not protocol {:?}", p.versioned_protocol);
                }
            }
        });

        return if !found {
            Err("Not found".to_string())
        } else {
            Ok(())
        };
    }

    fn decode_rpc_response(payload: &[u8], fork_context: Arc<ForkContext>) -> Result<(), String> {
        let protocol_ids = SupportedProtocol::currently_supported(&fork_context);
        let mut found = false;
        protocol_ids.iter().for_each(|p| {
            let mut codec = SSZSnappyInboundCodec::<E>::new(p.clone(), 20000, fork_context.clone());
            let mut bytes = BytesMut::from(payload);
            match codec.decode(&mut bytes) {
                Ok(r) => {
                    found = true;
                    println!("Found protocol {:?} {:?}", p.versioned_protocol, r);
                }
                Err(e) => {
                    println!("Not protocol {:?}", p.versioned_protocol);
                }
            }
        });

        return if !found {
            Err("Not found".to_string())
        } else {
            Ok(())
        };
    }

    fn decode_gossip_payload(payload: &[u8]) -> Result<(), String> {
        let mut codec = GossipsubCodec::new(20000, ValidationMode::Strict);
        let mut bytes = BytesMut::from(payload);
        if let GossipHandlerEvent::Message {
            rpc,
            invalid_messages,
        } = codec
            .decode(&mut bytes)
            .map_err(|e| e.to_string())?
            .unwrap()
        {
            println!(
                "{} messages, {} control_msgs, {} subscriptions",
                rpc.messages.len(),
                rpc.control_msgs.len(),
                rpc.subscriptions.len()
            );
            for msg in &rpc.messages {
                println!("Decoded message: {:?}", msg);
            }
        }
        Ok(())
    }
}
